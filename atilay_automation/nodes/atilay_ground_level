#!/usr/bin/env python


import rospy
import math
from sensor_msgs.msg import Range
from geometry_msgs.msg import Twist

HORIZONTAL_VEL = 0.4
STOP_DISTANCE = 0.35
LIDAR_ERROR = 0.10
SAFE_STOP_DISTANCE = STOP_DISTANCE + LIDAR_ERROR




class Obstacle():
    def __init__(self):
        self._cmd_pub = rospy.Publisher('atilay/cmd_vel', Twist, queue_size=1)
        self.obstacle()

    def get_scan(self):
        scan = rospy.wait_for_message('atilay/sonar', Range)
       
        distance = scan.range         
                                    
        return distance

    def obstacle(self):
        twist = Twist()
        atilay_moving = True

        while not rospy.is_shutdown():
            lidar_distances = self.get_scan()
            min_distance = min(lidar_distances)

            if min_distance < SAFE_STOP_DISTANCE:
                if atilay_moving:
                    twist.linear.x = 0.0
                    twist.linear.z = 0.0
                    twist.angular.z = 0.0
                    self._cmd_pub.publish(twist)
                    turtlebot_moving = False
                    rospy.loginfo('Stop!')
            else:
                twist.linear.z = HORIZONTAL_VEL
                twist.angular.z = 0.0
                self._cmd_pub.publish(twist)
                turtlebot_moving = True
                rospy.loginfo('Distance of the obstacle : %f', min_distance)

def main():
    rospy.init_node('atilay_ground_level')
    try:
        obstacle = Obstacle()
    except rospy.ROSInterruptException:
        pass

if __name__ == '__main__':
    main()
